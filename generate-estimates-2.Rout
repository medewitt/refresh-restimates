
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Purpose: Run Estimation Routines
> 
> # packages ----------------------------------------------------------------
> library(EpiNow2)
> library(magrittr)
> library(data.table)
> library(future)
> library(purrr)

Attaching package: ‘purrr’

The following object is masked from ‘package:data.table’:

    transpose

The following object is masked from ‘package:magrittr’:

    set_names

The following object is masked from ‘package:EpiNow2’:

    update_list

> 
> #options(future.globals.maxSize = 10000*1024^2)
> 
> #dat <- nccovid::get_covid_state(data_source = "cone")
> 
> dat <- nccovid::get_covid_state(data_source = "cone", reporting_adj = TRUE)
Using: cone as the data source
> 
> # Wait Until 15 Confirmed cases by county cumulative and within last 16 weeks
> 
> dat <- dat[date>=Sys.Date()-lubridate::weeks(16)]
> 
> dat <- dat[cases_confirmed_cum>15]
> 
> # Fix State Data Dump
> dat <- dat[,cases_daily := fifelse(date==as.Date("2020-09-25"),
+                               dplyr::lag(cases_daily,1), cases_daily), by = "county"]
> 
> reported_cases <- dat[,`:=` (region=county,
+            confirm = cases_daily)][,.(date,confirm, region)][date>as.Date("2020-03-10")]
> 
> 
> # correct for testing -----------------------------------------------------
> 
> nc_testing <- "https://raw.githubusercontent.com/conedatascience/covid-data/master/data/timeseries/nc-summary-stats.csv"
> 
> nc_testing <- data.table::fread(nc_testing)
> 
> dat_positivity_rate<- nc_testing[,date_n := as.numeric(as.Date(date))] %>%
+   .[date>as.Date("2020-03-15")]
> 
> mod <- mgcv::gam(positive_tests ~ s(date_n,bs = "gp"),
+                  data = dat_positivity_rate,
+                  family = stats::quasibinomial,
+                  weights = daily_tests)
> start <- Sys.time()
> cat(start)
1609181329> # corrected cases for modelling -------------------------------------------
> 
> dat$predicted_positive <- predict(mod, newdata = dat[,date_n:=as.numeric(date)], type = "response")
> 
> dat <- dat[,predicted_positive := fifelse(predicted_positive<.02,.02, predicted_positive)]
> 
> first_case_dat <- dat[cases_daily>0, .SD[which.min(date)], by = county]
> 
> 
> first_case_dat <- first_case_dat[,.(county,date)] %>%
+   setnames(old = "date", new = "first_case_date")
> 
> # Set Keys for Joining
> setkey(first_case_dat, "county")
> setkey(dat, "county")
> 
> 
> dat <- dat[first_case_dat, nomatch = 0]
> 
> dat <- dat[date>=first_case_date]
> 
> increase_cases <- function (observed_cases, pos_rate, m = 10, k = 0.462) {
+     y <- observed_cases * pos_rate^k * m
+     return(y)
+ }
> 
> dat$confirm <- increase_cases(observed_cases = dat$cases_daily,
+                                 pos_rate = dat$predicted_positive)
> 
> reported_cases <- dat[,`:=` (region=county,
+                              confirm = round(confirm))] %>%
+   .[,.(date,confirm, region)] %>%
+   .[date>as.Date("2020-05-18")]
> 
> # Smooth on Regions for R estimation only.
> cone_region <- reported_cases[region %chin% nccovid::cone_region,
+                               .(confirm = sum(confirm)), by = "date"] %>%
+   .[,region:="Cone Health"] %>% 
+   .[,confirm:=data.table::frollmean(confirm, n = 3)] %>% 
+   .[,confirm :=round(confirm)]%>% 
+   .[!is.na(confirm)]
> 
> nc_overall <- reported_cases[,.(confirm = sum(confirm)), by = "date"] %>%
+   .[,region:="North Carolina"]%>% 
+   .[,confirm:=data.table::frollmean(confirm, n = 3)] %>% 
+   .[,confirm :=round(confirm)] %>% 
+   .[!is.na(confirm)]
> 
> reported_cases <-reported_cases %>%
+   merge(cone_region, all = TRUE) %>%
+   merge(nc_overall, all=TRUE)
> 
> # Correct for State Data Dump
> reported_cases <- reported_cases[ ,confirm:= fifelse(date==as.Date("2020-09-25"),
+                                    shift(confirm,1),confirm), by = "region"]
> 
> 
> # pull low population density counties ------------------------------------
> 
> county_info <- nccovid::nc_population[ ,1:2][order(july_2020, decreasing = TRUE)][county!="STATE"]
> 
> county_single <- c(head(county_info$county,10), "North Carolina", "Cone Health")
> county_cumulative <- setdiff(county_info$county,county_single)
> 
> 
> # setup -------------------------------------------------------------------
> 
> # NCDHHS Reporting Data Starting 2020-10-29
> 
> reporting_delay <- nccovid::nc_delay
> 
> generation_time <- EpiNow2::get_generation_time(disease = "SARS-CoV-2", source = "ganyani")
> incubation_period <- EpiNow2::get_incubation_period(disease = "SARS-CoV-2", source = "lauer")
> 
> cat("prep completed")
prep completed> 
> # Load utils --------------------------------------------------------------
> if (!exists("setup_future", mode = "function")) source(here::here("util.R"))
> no_cores <- setup_future(reported_cases = reported_cases)
INFO [2020-12-28 18:48:50] Using 4 workers with 4 cores per worker
> 
> # run estimation ----------------------------------------------------------
> #EpiNow2::setup_logging(file = "log.log")
> debug <- FALSE
> if(debug){
+   #reported_cases <- reported_cases[region%chin%nccovid::cone_region]
+   reported_cases <- reported_cases[region%chin%c("Guilford", "Alamance")]
+   reported_cases_single <- reported_cases[region%chin%c("Alamance")]
+ 
+   estimates <- regional_epinow(reported_cases = reported_cases[region=="Mecklenburg"],
+                              generation_time = generation_time,
+                              target_folder = here::here("rt-estimates-out"),
+                              logs = here::here("epinow-logs"),
+                              non_zero_points = 14, horizon = 14, 
+                              delays = delay_opts(incubation_period,
+                                                  reporting_delay),
+                              stan = stan_opts(cores = 8, chains = 4,
+                                               max_execution_time = 60*60*4),
+                              rt = rt_opts(prior = list(mean = 1.25, sd = 0.25)))
+ } else {
+ if(file.exists(here::here("info.log"))){
+   unlink(here::here("info.log"))
+ }
+ cat('Running the full model')
+ 
+ reported_cases_low_density <- reported_cases[region%in%county_cumulative]
+ 
+ estimates <- try(regional_epinow(reported_cases = reported_cases_low_density,
+                              generation_time = generation_time,
+                              target_folder = here::here("rt-estimates-out"),
+                              logs = here::here("epinow-logs"),
+                              delays = delay_opts(incubation_period,
+                                            reporting_delay),
+                              non_zero_points = 14, horizon = 14, 
+                              stan = stan_opts(init_fit = "cumulative",samples = 6000,
+                                               chains = 4, cores = no_cores, control = list(adapt_delta = 0.95, max_treedepth = 15),
+                                               max_execution_time = 60*60*6,
+                                               future = FALSE),
+                              rt = rt_opts(prior = list(mean = 1.25, sd = 0.25))))
+ 
+ }
Running the full modelINFO [2020-12-28 18:48:50] Producing following optional outputs: regions, summary, samples, plots, latest
Logging threshold set at INFO for the EpiNow2 logger
Writing EpiNow2 logs to: /mnt/resource/refresh-restimates/epinow-logs/regional-epinow/2020-12-28.log
Logging threshold set at INFO for the EpiNow2.epinow logger
Writing EpiNow2.epinow logs to: /mnt/resource/refresh-restimates/epinow-logs/epinow/2020-12-28.log
INFO [2020-12-28 18:48:50] Reporting estimates using data up to: 2020-12-28
INFO [2020-12-28 18:48:50] Saving estimates to : /mnt/resource/refresh-restimates/rt-estimates-out
INFO [2020-12-28 18:48:50] Producing estimates for: 90 regions
INFO [2020-12-28 18:48:50] Regions excluded: 0 regions
INFO [2020-12-28 18:48:50] Showing progress using progressr.
Error in mcfork(detached) : 
  unable to fork, possible reason: Cannot allocate memory
> 
> # Now run program to make synthesis
> # Done
> plan("sequential")
> cat("done with estimates")
done with estimates> 
> proc.time()
   user  system elapsed 
 15.707  10.489  21.547 
